from . import NadaType
from dataclasses import dataclass
from nada_dsl.circuit_io import Literal
from nada_dsl.nada_types.boolean import Boolean, PublicBoolean, SecretBoolean
from nada_dsl.operations import Addition, GreaterOrEqualThan, GreaterThan, LessOrEqualThan, LessThan, Multiplication, Subtraction
from nada_dsl.source_ref import SourceRef
from typing import Union

# This file is automatically generated. Do not edit!

@dataclass
class Rational(NadaType):
    value: float

    def __init__(self, value: float):
        super().__init__(inner=Literal(value=value, source_ref=SourceRef.back_frame()))
        if isinstance(value, float):
            self.value = value
        else:
            raise ValueError("Expected {}, got {}".format("float", type(value).__name__))
    def __add__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["Rational","PublicRational","SecretRational"]:
        if isinstance(other, Rational):
            return Rational(value=self.value + other.value)
        elif isinstance(other, PublicRational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "+", other))
    def __sub__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["Rational","PublicRational","SecretRational"]:
        if isinstance(other, Rational):
            return Rational(value=self.value - other.value)
        elif isinstance(other, PublicRational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "-", other))
    def __mul__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["Rational","PublicRational","SecretRational"]:
        if isinstance(other, Rational):
            return Rational(value=self.value * other.value)
        elif isinstance(other, PublicRational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "*", other))
    def __lt_(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["Boolean","PublicBoolean"]:
        if isinstance(other, Rational):
            return Boolean(value=self.value < other.value)
        elif isinstance(other, PublicRational):
            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "<", other))
    def __gt__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["Boolean","PublicBoolean"]:
        if isinstance(other, Rational):
            return Boolean(value=self.value > other.value)
        elif isinstance(other, PublicRational):
            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, ">", other))
    def __le__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["Boolean","PublicBoolean"]:
        if isinstance(other, Rational):
            return Boolean(value=self.value <= other.value)
        elif isinstance(other, PublicRational):
            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "<=", other))
    def __ge__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["Boolean","PublicBoolean"]:
        if isinstance(other, Rational):
            return Boolean(value=self.value >= other.value)
        elif isinstance(other, PublicRational):
            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, ">=", other))
@dataclass
class PublicRational(NadaType):
    def __add__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["PublicRational","PublicRational","SecretRational"]:
        if isinstance(other, Rational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, PublicRational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "+", other))
    def __sub__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["PublicRational","PublicRational","SecretRational"]:
        if isinstance(other, Rational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, PublicRational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "-", other))
    def __mul__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["PublicRational","PublicRational","SecretRational"]:
        if isinstance(other, Rational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, PublicRational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "*", other))
    def __lt_(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["PublicBoolean","PublicBoolean"]:
        if isinstance(other, Rational):
            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "<", other))
    def __gt__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["PublicBoolean","PublicBoolean"]:
        if isinstance(other, Rational):
            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, ">", other))
    def __le__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["PublicBoolean","PublicBoolean"]:
        if isinstance(other, Rational):
            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "<=", other))
    def __ge__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["PublicBoolean","PublicBoolean"]:
        if isinstance(other, Rational):
            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return PublicBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, ">=", other))
@dataclass
class SecretRational(NadaType):
    def __add__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["SecretRational","SecretRational","SecretRational"]:
        if isinstance(other, Rational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        elif isinstance(other, PublicRational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "+", other))
    def __sub__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["SecretRational","SecretRational","SecretRational"]:
        if isinstance(other, Rational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        elif isinstance(other, PublicRational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "-", other))
    def __mul__(
        self, other: Union["Rational","PublicRational","SecretRational"]
    ) -> Union["SecretRational","SecretRational","SecretRational"]:
        if isinstance(other, Rational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        elif isinstance(other, PublicRational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        elif isinstance(other, SecretRational):
            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretRational(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "*", other))
    def __lt_(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["SecretBoolean","SecretBoolean"]:
        if isinstance(other, Rational):
            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "<", other))
    def __gt__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["SecretBoolean","SecretBoolean"]:
        if isinstance(other, Rational):
            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, ">", other))
    def __le__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["SecretBoolean","SecretBoolean"]:
        if isinstance(other, Rational):
            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, "<=", other))
    def __ge__(
        self, other: Union["Rational","PublicRational"]
    ) -> Union["SecretBoolean","SecretBoolean"]:
        if isinstance(other, Rational):
            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        elif isinstance(other, PublicRational):
            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())
            return SecretBoolean(inner=operation)
        else:
            raise TypeError("Invalid operation: {} {} {}".format(self, ">=", other))
